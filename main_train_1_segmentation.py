#!/usr/bin/env python

# this script trains the AI to segment left-sided chambers from cardiac CT
# in terminal, type ./main_step2A_train_segmentation --batch N to run the code
# N here means in cross-validation you pick the nth subsample for validation and the rest subsamples for training.

# System
import argparse
import os

# Third Party
import numpy as np
import tensorflow as tf

# Internal
import supplements
import supplements.utils as ut
import dvpy as dv
import dvpy.tf
import function_list as ff
from Build_model import *
cg = supplements.Experiment()



# main script (usually no need to change)
def train(batch):
    #===========================================
    dv.section_print('Calculating Image Lists...')

    imgs_list_trn=[np.load(os.path.join(cg.model_dir,'partitions_dir/img_list_'+str(p)+'.npy'),allow_pickle = True) for p in range(cg.num_partitions)]
    segs_list_trn=[np.load(os.path.join(cg.model_dir,'partitions_dir/seg_list_'+str(p)+'.npy'),allow_pickle = True) for p in range(cg.num_partitions)]
    

    if batch is None:
      print('No batch was provided: training on all images.')
      batch = 'all'

      imgs_list_trn = np.concatenate(imgs_list_trn)
      segs_list_trn = np.concatenate(segs_list_trn)
      
      imgs_list_tst = imgs_list_trn
      segs_list_tst = segs_list_trn
  
    else:
      imgs_list_tst = imgs_list_trn.pop(batch)
      segs_list_tst = segs_list_trn.pop(batch)
    
      imgs_list_trn = np.concatenate(imgs_list_trn)
      segs_list_trn = np.concatenate(segs_list_trn)

    len_list=[len(imgs_list_trn),len(segs_list_trn),len(imgs_list_tst),len(segs_list_tst)]
    print(len_list)

    #===========================================
    dv.section_print('Creating and compiling model...')
    losses = {'unet':'categorical_crossentropy','t':'mse','x':'cosine_proximity','y':'cosine_proximity',}
    weights = {'unet':1,'t':0,'x':0,'y':0}  
    build = Build_Model()
    model = build.get_model(losses,weights)

    #======================
    dv.section_print('Set Callbacks...')
    callbacks = build.set_callbacks(batch, task = 's')


    #======================
    dv.section_print('Fitting model...')

    datagen_flow,valgen_flow = build.fit_models(imgs_list_trn,segs_list_trn,imgs_list_tst, segs_list_tst)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen_flow,
                        steps_per_epoch = imgs_list_trn.shape[0] // cg.batch_size,
                        epochs = cg.epochs,
                        workers = 1,
                        validation_data = valgen_flow,
                        validation_steps = imgs_list_tst.shape[0] // cg.batch_size,
                        callbacks = callbacks,
                        verbose = 1,
                       )

    
if __name__ == '__main__':

  parser = argparse.ArgumentParser()
  parser.add_argument('--batch', type=int)
  args = parser.parse_args()

  if args.batch is not None:
    assert(0 <= args.batch < cg.num_partitions)

  train(args.batch)
  